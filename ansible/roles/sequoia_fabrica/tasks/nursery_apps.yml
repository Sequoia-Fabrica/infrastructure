---
- name: Install docker-compose-v2
  become: true
  ansible.builtin.apt:
    name: docker-compose-v2

- name: "Ensure /opt/authentik/{{ item }}"
  become: true
  ansible.builtin.file:
    path: "/opt/authentik/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: ug=rwx,o=rx
  with_items:
    - database
    - redis
    - media
    - custom-templates
    - certs
- name: Template /opt/authentik/.env
  become: true
  ansible.builtin.template:
    src: authentik.env.j2
    dest: /opt/authentik/.env
    owner: root
    group: root
    mode: ug=rw,o=
- name: Template /opt/authentik/docker-compose.yml
  become: true
  ansible.builtin.template:
    src: authentik.docker-compose.yml.j2
    dest: /opt/authentik/docker-compose.yml
    owner: root
    group: root
    mode: ug=rw,o=
- name: Authentik docker-compose
  become: true
  community.docker.docker_compose_v2:
    project_src: /opt/authentik

- name: Ensure /opt/prometheus/data
  become: true
  ansible.builtin.file:
    path: /opt/prometheus/data
    state: directory
    owner: nobody
    group: nogroup
    mode: ug=rwx,o=rx
- name: Ensure /opt/prometheus/config
  become: true
  ansible.builtin.file:
    path: /opt/prometheus/config
    state: directory
    owner: root
    group: root
    mode: ug=rwx,o=rx
- name: Template /opt/prometheus/config/prometheus.yml
  become: true
  ansible.builtin.template:
    src: prometheus.yml.j2
    dest: /opt/prometheus/config/prometheus.yml
    owner: root
    group: root
    mode: ug=rw,o=r
  notify: Reload prometheus
- name: Run prometheus
  community.docker.docker_container:
    name: prometheus
    image: prom/prometheus
    restart_policy: unless-stopped
    ports:
      - 9090:9090
    mounts:
      - type: bind
        source: /opt/prometheus/config
        target: /etc/prometheus
      - type: bind
        source: /opt/prometheus/data
        target: /prometheus

- name: Run node-exporter
  become: true
  community.docker.docker_container:
    name: node-exporter
    image: quay.io/prometheus/node-exporter:latest
    command: --path.rootfs=/host
    restart_policy: unless-stopped
    network_mode: host
    pid_mode: host
    mounts:
      - type: bind
        source: /
        target: /host
        propagation: rslave
        read_only: true

- name: Ensure /opt/grafana/storage
  become: true
  ansible.builtin.file:
    path: /opt/grafana/storage
    state: directory
    owner: nobody
    group: nogroup
    mode: ug=rwx,o=rx
    recurse: true
- name: Run grafana
  community.docker.docker_container:
    name: grafana
    image: grafana/grafana-oss
    restart_policy: unless-stopped
    ports:
      - 3000:3000
    user: nobody:nogroup
    env:
      GF_PANELS_DISABLE_SANITIZE_HTML: "true"
    mounts:
      - type: bind
        source: /opt/grafana/storage
        target: /var/lib/grafana


- name: Ensure /opt/frigate/config
  become: true
  ansible.builtin.file:
    path: /opt/frigate/config
    state: directory
    owner: root
    group: root
    mode: ug=rwx,o=rx
- name: Place /opt/frigate/config/config.yml
  become: true
  ansible.builtin.template:
    src: frigate.config.yml
    dest: /opt/frigate/config/config.yml
    owner: root
    group: root
    mode: ug=rw,o=
  notify: Restart frigate
- name: Ensure /opt/frigate/media
  become: true
  ansible.builtin.file:
    path: /opt/frigate/media
    state: directory
    owner: root
    group: root
    mode: ug=rwx,o=rx
- name: Run frigate
  community.docker.docker_container:
    name: frigate
    image: ghcr.io/blakeblackshear/frigate:stable
    restart_policy: unless-stopped
    network_mode: host
    shm_size: 1G
    env:
      FRIGATE_RTSP_PASSWORD: "{{ frigate_rtsp_password }}"
      FRIGATE_MQTT_PASSWORD: "{{ frigate_mqtt_password }}"
    devices:
      - /dev/bus/usb:/dev/bus/usb
    mounts:
      - type: tmpfs
        target: /tmp/cache
        tmpfs_size: 1G
      - type: bind
        source: /opt/frigate/media
        target: /media/frigate
      - type: bind
        source: /opt/frigate/config
        target: /config
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true

- name: Run prometheus-frigate-exporter
  community.docker.docker_container:
    name: prometheus_frigate_exporter
    image: rhysbailey/prometheus-frigate-exporter
    restart_policy: unless-stopped
    ports:
      - 9101:9100
    env:
      FRIGATE_STATS_URL: http://nursery.xylem.sequoiafabrica.org:5000/api/stats

- name: Ensure /opt/aruba_exporter/repo
  become: true
  ansible.builtin.file:
    path: /opt/aruba_exporter
    state: directory
    owner: root
    group: root
    mode: ugo=rwx
- name: Template /opt/aruba_exporter/config.yaml
  ansible.builtin.template:
    src: aruba_exporter.config.yaml.j2
    dest: /opt/aruba_exporter/config.yaml
- name: Clone github.com:slashdoom/aruba_exporter
  ansible.builtin.git:
    repo: https://github.com/slashdoom/aruba_exporter
    dest: /opt/aruba_exporter/repo
  register: aruba_exporter_git_repo
- name: Rebuild aruba_exporter Docker image
  when: aruba_exporter_git_repo.changed
  community.docker.docker_image:
    name: aruba_exporter
    tag: latest
    source: build
    force_source: true
    force_tag: true
    build:
      path: /opt/aruba_exporter/repo
  register: aruba_exporter_container_image
  notify: Restart aruba_exporter
- name: Run aruba_exporter
  community.docker.docker_container:
    name: aruba_exporter
    image: aruba_exporter:latest
    state: started
    restart_policy: unless-stopped
    command: "/go/aruba_exporter/aruba_exporter -config.file /opt/aruba_exporter/config.yaml"
    ports:
      - 9909:9909
    mounts:
      - type: bind
        source: /opt/aruba_exporter/config.yaml
        target: /opt/aruba_exporter/config.yaml
        read_only: true
